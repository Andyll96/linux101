1. GETTING STARTED
    date - pulls up current date
    cal - pulls up calendar
    df - free disk space
    free - free memory amount
    pwd - shows current directory
    ls - lists files and directories
    man - type man, then a command and it'll pull up the description and available options/ flags for that command

2. FILE MANIPULATION
    file - shows file type
    less - views text file minmally (hit 'q' to exit)
    mkdir - creates folder
    cp - copies file into given directory or into the same directory with a given new name
    mv - moves a file into a given directory or renames it given a secondary name
    rm - removes a file or directory

3. WILDCARDS, HARD LINKS, & SYMBOLIC LINKS
    Wildcards - group of special characters used to specify a big group of file names, also called globbing 
        * - match any character with your query 
        ? - match any single character
        [abc] - specifies a range. If you did m[a,o,u]m it can become: mam, mum, mom if you did: m[a-d]m it can become anything that starts and ends with m and has any character a to d inbetween. For example, these would work: mam, mbm, mcm, mdm. This kind of wildcard specifies an “OR” relationship (you only need one to match).
        [!abc] - matches any other characters that're not in the brackets
    Links - ln command lets you create hard and symbolic Links. EX. ln pic picshortcut EX. ln -s pic picshortcut
        hardlink - original way of creating links, every file has one and it's what gives the file it's name. Creates an additional directory entry for a file but can't work outside it's own file system and can't reference a directory
        symbolic link - more modern and favourable version of links, it's like a windows shortcut

4. FILENAMES, HISTORY AND SHORTCUTS
    - there is a maximum filename length for any given file (255 characters)
    - filenames are case sensitive
    - specific characters will confuse terminal (/)
    history - lets you view your past commands for the past 500 lines
        - you can pipe with "less" command to see history page by page
        !! - lets you run the last command 
        !(history num) - lets you run the command specified by it's index in the history. EX. !499, runs line 499 from history
        - you can also hit the up button on the keyboard to go to previous commands
    - pressing tab, autocompletes 

5. TYPE, WHICH, AND APROPOS
    - a command is an executable program, a built in shell command, a shell function, or alias (a command we define using other commands)
    type - gives the type of a command
    which - where the command lives on the system, but won't work for built ins or alias commands that're subsititue for actual executables
    help - gives more info about command
        --help - displays the commands supported syntax and some options. EX. mkdir --help
    man - manual page for commands
        - the manual has 8 sections that can be searched. EX. man 5 passwd, looks at the areas in section 5 for passwd
        apropos - used to search man pages. EX. apropos floppy
        what is - gives a short description of the command
        info - gives a detailed description of the command
        http://tips.dataexpedition.com/1man.html

6. CREATE YOUR OWN COMMAND WITH ALIAS
    - you can put more than one command on the same line by separating them with a ';'. EX. cd /usr; ls; cd -
    alias - lets you create a command by stringing together other commands
        EX. alias foo='cd /usr; ls; cd -'
            - foo being the created command
        - alias commands won't save once the terminal is closed
        - if you want to to save it, you have to edit the .bashrc file, which is a customization file where you can store your aliases and potentially transfer them to another machine to use
            nano .bashrc - opens up the .bashrc file in a terminal text editor, nano
    unalias - deletes a given alias

7. I/O REDIRECTION OF STANDARD OUTPUTS
    - lets you redirect the input and output of commands to and from files and also lets you connect multiple command pipelines
    - all programs in terminal give an output (result or status error message), which sends the result to a file called 'standard output (stdout)' and messages to 'standard error (stderr)'
        - by default they're not saved to disk
        - the keyboard is tied to 'standard input (stdin)'
    > - lets you redirect output to a file. EX. ls -l /usr/bin > ls-output.txt
        - when you do this for a non-existant directory, it'll output an error message to the terminal and not into the txt file
    >> - appends to the output instead of overwriting it. EX. ls -l /usr/bin >> ls-output.txt

8. REDIRECTING STANDARD TERMINAL ERRORS IN LINUX
    - the linux shell refers to 
        - standard input (stdin < 0)
        - standard output (stdin < 1)
        - standard error (stdin < 2)
    - therefore we can redirect error messages. EX. ls -l /bin/usr 2> ls-error.txt
    - to redirect output and error messages into same file. EX. ls -l /bin/usr > ls-output.txt 2>&1
        - always put the error redirection at the end of the command
    - the new method of doing the above. EX. ls -l /bin/usr &> ls-output.txt
    - to get rid of the error messages. EX. ls -l /bin/usr 2> /dev/null
        - /dev/null is a concept in unix where it throws all the bits in a bucket and does nothing with them

9. USING CAT WITH STANDARD INPUTS
    cat - stands for concatenate. Reads one or more files and copies them to stdout. EX. cat ls-output.txt
        - you can also use cat to join multiple files. EX. cat hak5.mpeg.0* > hak5.mpeg
    
10. GREP AND PIPES
    stdout | stdin - allows you to redirect the output of a command into the input of another command. EX. ls -l usr/bin | less
        - using several commands together using pipes are called filters. EX. ls /bin /usr/bin | sort | unique | less
        unique - only shows stdin without any duplicates
        wc - shows line, word, and byte count
    grep - finds patterns in texts. EX. history | grep 'ls'
    head - shows the first 10 or otherwise specified number of lines of the file
    tail- the same as head but at the end of the file
    tee - copies two outputs or multiple files at the same time

11. HOW TO USE ECHO
    - 'expansion' a concept related to the * wildcard, where it expands and fills in the gap of the wildcard
        ~ - expands to the home directory
        $((math expression)) - allows you to write math expressions with whole numbers

12. USING EXPANSIONS COMMANDS IN THE LINUX TERMINAL PART 2
    {} - Brace Expansion, can make several text strings out of one pattern with braces around them
        EX. echo Number_{1..5}
        EX. echo LETTER_{Z..A}
        EX. echo a{A{1,2}, B{3,4}}b
        EX. mkdir {2009..2011}-0{1..9}{2009..2011}-{10..12}
    - you can also expand parameters 
        - echo $USER
    printenv - shows a list of available variables
    - the output of a command can also be used as an expansion, which in turn will act as an argument for a command
        EX. echo $(ls)
        EX. ls -l $(which cp)
        - an older / shorter alternative EX. ls -l `which cp`

13. THE IMPORTANCE OF QUOTES IN THE TERMINAL
    - using double quotes around the name of a text document will fix any errors involving filenames with spaces. It makes any special characters lose their meaning except for `, \, and $
    - single quotes can supress the expansion even farther than double quotes
    - special characters are escaped by \. EX. echo "this costs \$10.00"

14. YOUR FAVOURITE TIPS AND TRICKS
    - If a command has been aliased, and you want to run the un-aliased version of the command, you must put a back slash before the command.
        EX. alias ls="ls -l"
        ls /usr/bin
        \ls /usr/bin
    - press ctrl+r while in the terminal to reverse search your history. Write in a substring of the previous command you're looking for in your history and it will appear

15. MY TOP BEST RESOURCES
    - www.commandlinefu.com
    - files.fosswire.com/2007/08/fwunixref.pdf
    - The Linux Command Line: A Complete Introduction (Book)
    - Ubuntu for Non Geeks (Book)
    - Linux Pocket Guide (Book)
    - Working at the Ubuntu Command Line Prompt (Book)
    - Ubuntu Made Easy (Book)

16. TYPING LESS WITH KEYBOARD SHORTCUTS
    - ctrl+a : moves cursor to beginning of the line
    - ctrl+e : moves cursor to end of the line
    - ctrl+b : moves cursor to the left by one character
    - ctrl+f : moves cursor to the right by one character
    - ctrl+d : delete character to the right (delete button on keyboard)
    - ctrl+t : shift letter to the right 
    - alt+l : lowercase (check to see if still works)
    - alt+u : uppercase (check to see if still works)
    - ctrl+k : deletes everything on the right of the cursor
    - ctrl+u : deletes everything on the left of the cursor

17. HOW TO USE HISTORY
    history - lets you view your past commands for the past 500 lines
        - you can pipe with "less" command to see history page by page
        !! - lets you run the last command 
        !(history num) - lets you run the command specified by it's index in the history. EX. !499, runs line 499 from history
        - you can also hit the up button on the keyboard to go to previous commands
        ctrl+p & ctrl+n : lets you move back and forth on the history list
        alt+> & alt+< : lets you move to the begininng and end of the list

18. HOW TO USE PERMISSIONS
    - linux computers can be used by more than one person at the same time. Multiple people in different locations can work on the same machine at the same time.
    - linux allows certain users to do certain things. Permissions
    - Users can "own" or belong to a "group" that has permissions to access files by the owner. The owner can also grant access to the "world" or everyone and they can check your identity using the id command
    id - this command will give you your identity
    /etc/passwd - a file that shows the user accounts
    /etc/group - shows the group information. The shadow file, found in the same directory, holds information on the users password
    permissions - by using ls -l, the first 10 characters reveal the level of permission assigned to each file
        - the first character is the file type, the other 9 are read, write, and execute permissions for the files owner, group and world
        - for the first character
            - : means a regular file
            d : directory
            l : symbolic link
            c : character special file (terminal or modem)
            b : block special file (hard drive)
        - the first 3 numbers are for the owner, then the next 3 are for the group, then the last 3 are for the world
    chmod - allows the owner of a file to change permissions. There are two ways of using this command using octal representation
        EX. 
            6 = 110 octal = rw- permission
            7 = 111 octal = rwx permission
            3 = 011 octal = -wx permission
            0 = 000 octal = --- permission
        EX. chmod 600 example.txt : -rw-------
    or symbolic notation
        EX.
            a : all
            o : others or world
            g : group owner
            u : user owner

19. HOW TO CHANGE YOUR IDENTITY
    - There are three ways you can change your identity 
        - log back out and log in as another user
        su - lets you start a new shell session as that user or you can issue a single command as that one
            EX. su [-[l]] [user], the -l will create a login shell for that user
            EX. su - , this lets you login as super/root user and it'll ask you to enter the password. You can also use sudo for this if you don't have the password, but you'll need to add a password. Remember to type "exit" after the session
            EX. su -c 'ls -l example.txt', runs one command as super  user
        sudo - can define specific commands that a user can use 
            EX. sudo -l, shows you what previlages you currently have
    chown - change owner or group owner
        EX. chown [owner] [:[group]] file...
    passwd - allows you to change the current password