1. GETTING STARTED
    date - pulls up current date
    cal - pulls up calendar
    df - free disk space
    free - free memory amount
    pwd - shows current directory
    ls - lists files and directories
    man - type man, then a command and it'll pull up the description and available options/ flags for that command

2. FILE MANIPULATION
    file - shows file type
    less - views text file minmally (hit 'q' to exit)
    mkdir - creates folder
    cp - copies file into given directory or into the same directory with a given new name
    mv - moves a file into a given directory or renames it given a secondary name
    rm - removes a file or directory

3. WILDCARDS, HARD LINKS, & SYMBOLIC LINKS
    Wildcards - group of special characters used to specify a big group of file names, also called globbing 
        * - match any character with your query 
        ? - match any single character
        [abc] - specifies a range. If you did m[a,o,u]m it can become: mam, mum, mom if you did: m[a-d]m it can become anything that starts and ends with m and has any character a to d inbetween. For example, these would work: mam, mbm, mcm, mdm. This kind of wildcard specifies an “OR” relationship (you only need one to match).
        [!abc] - matches any other characters that're not in the brackets
    Links - ln command lets you create hard and symbolic Links. EX. ln pic picshortcut EX. ln -s pic picshortcut
        hardlink - original way of creating links, every file has one and it's what gives the file it's name. Creates an additional directory entry for a file but can't work outside it's own file system and can't reference a directory
        symbolic link - more modern and favourable version of links, it's like a windows shortcut

4. FILENAMES, HISTORY AND SHORTCUTS
    - there is a maximum filename length for any given file (255 characters)
    - filenames are case sensitive
    - specific characters will confuse terminal (/)
    history - lets you view your past commands for the past 500 lines
        - you can pipe with "less" command to see history page by page
        !! - lets you run the last command 
        !(history num) - lets you run the command specified by it's index in the history. EX. !499, runs line 499 from history
        - you can also hit the up button on the keyboard to go to previous commands
        - pressing tab, autocompletes 

5. TYPE, WHICH, AND APROPOS
    - a command is an executable program, a built in shell command, a shell function, or alias (a command we define using other commands)
    type - gives the type of a command
    which - where the command lives on the system, but won't work for built ins or alias commands that're subsititue for actual executables
    help - gives more info about command
        --help - displays the commands supported syntax and some options. EX. mkdir --help
    man - manual page for commands
        - the manual has 8 sections that can be searched. EX. man 5 passwd, looks at the areas in section 5 for passwd
        apropos - used to search man pages. EX. apropos floppy
        what is - gives a short description of the command
        info - gives a detailed description of the command
        http://tips.dataexpedition.com/1man.html

6. CREATE YOUR OWN COMMAND WITH ALIAS
    - you can put more than one command on the same line by separating them with a ';'. EX. cd /usr; ls; cd -
    alias - lets you create a command by stringing together other commands
        EX. alias foo='cd /usr; ls; cd -'
            - foo being the created command
        - alias commands won't save once the terminal is closed
        - if you want to to save it, you have to edit the .bashrc file, which is a customization file where you can store your aliases and potentially transfer them to another machine to use
            nano .bashrc - opens up the .bashrc file in a terminal text editor, nano
    unalias - deletes a given alias

7. I/O REDIRECTION OF STANDARD OUTPUTS
    - lets you redirect the input and output of commands to and from files and also lets you connect multiple command pipelines
    - all programs in terminal give an output (result or status error message), which sends the result to a file called 'standard output (stdout)' and messages to 'standard error (stderr)'
        - by default they're not saved to disk
        - the keyboard is tied to 'standard input (stdin)'
    > - lets you redirect output to a file. EX. ls -l /usr/bin > ls-output.txt
        - when you do this for a non-existant directory, it'll output an error message to the terminal and not into the txt file
    >> - appends to the output instead of overwriting it. EX. ls -l /usr/bin >> ls-output.txt

8. REDIRECTING STANDARD TERMINAL ERRORS IN LINUX
    - the linux shell refers to 
        - standard input (stdin < 0)
        - standard output (stdin < 1)
        - standard error (stdin < 2)
    - therefore we can redirect error messages. EX. ls -l /bin/usr 2> ls-error.txt
    - to redirect output and error messages into same file. EX. ls -l /bin/usr > ls-output.txt 2>&1
        - always put the error redirection at the end of the command
    - the new method of doing the above. EX. ls -l /bin/usr &> ls-output.txt
    - to get rid of the error messages. EX. ls -l /bin/usr 2> /dev/null
        - /dev/null is a concept in unix where it throws all the bits in a bucket and does nothing with them

9. USING CAT WITH STANDARD INPUTS
    cat - stands for concatenate. Reads one or more files and copies them to stdout. EX. cat ls-output.txt
        - you can also use cat to join multiple files. EX. cat hak5.mpeg.0* > hak5.mpeg
    
10. GREP AND PIPES
    stdout | stdin - allows you to redirect the output of a command into the input of another command. EX. ls -l usr/bin | less
        - using several commands together using pipes are called filters. EX. ls /bin /usr/bin | sort | unique | less
        unique - only shows stdin without any duplicates
        wc - shows line, word, and byte count
    grep - finds patterns in texts. EX. history | grep 'ls'
    head - shows the first 10 or otherwise specified number of lines of the file
    tail- the same as head but at the end of the file
    tee - copies two outputs or multiple files at the same time